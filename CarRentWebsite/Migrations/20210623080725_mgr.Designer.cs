// <auto-generated />
using System;
using CarRentWebsite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarRentWebsite.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210623080725_mgr")]
    partial class mgr
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarRentWebsite.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");
                });

            modelBuilder.Entity("CarRentWebsite.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mercedes-Benz"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tesla"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Volkswagen"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Porsche"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Honda"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Ford"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Nissan"
                        },
                        new
                        {
                            Id = 9,
                            Name = "BMW"
                        });
                });

            modelBuilder.Entity("CarRentWebsite.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CarClassId")
                        .HasColumnType("int");

                    b.Property<int>("CarStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CarTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EngineId")
                        .HasColumnType("int");

                    b.Property<int>("FuelId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KilometersDriven")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegisterNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatsCount")
                        .HasColumnType("int");

                    b.Property<int>("TransmissionId")
                        .HasColumnType("int");

                    b.Property<int>("TrunkSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CarClassId");

                    b.HasIndex("CarStatusId");

                    b.HasIndex("CarTypeId");

                    b.HasIndex("EngineId");

                    b.HasIndex("FuelId");

                    b.HasIndex("TransmissionId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CarClassId = 2,
                            CarStatusId = 1,
                            CarTypeId = 1,
                            Description = "Car description...",
                            EngineId = 2,
                            FuelId = 1,
                            ImageUrl = "https://lh3.googleusercontent.com/proxy/r31nMzFvIBFXtAETyk6TaTrPpwO0eNWSDyQa1UGXCb9XkHa2vbDGczQu8J1vXfjv5v663TVdd-mh-kVtOqvRkcNRmFMBbykg",
                            KilometersDriven = 0,
                            RegisterDate = new DateTime(2021, 6, 23, 11, 7, 25, 380, DateTimeKind.Local).AddTicks(4948),
                            RegisterNumber = "BO7104RT",
                            SeatsCount = 4,
                            TransmissionId = 1,
                            TrunkSize = 40
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 3,
                            CarClassId = 4,
                            CarStatusId = 1,
                            CarTypeId = 2,
                            Description = "Car description2...",
                            EngineId = 3,
                            FuelId = 1,
                            ImageUrl = "https://lh3.googleusercontent.com/proxy/r31nMzFvIBFXtAETyk6TaTrPpwO0eNWSDyQa1UGXCb9XkHa2vbDGczQu8J1vXfjv5v663TVdd-mh-kVtOqvRkcNRmFMBbykg",
                            KilometersDriven = 0,
                            RegisterDate = new DateTime(2021, 6, 23, 11, 7, 25, 382, DateTimeKind.Local).AddTicks(9926),
                            RegisterNumber = "AA7104MT",
                            SeatsCount = 4,
                            TransmissionId = 2,
                            TrunkSize = 60
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            CarClassId = 5,
                            CarStatusId = 1,
                            CarTypeId = 3,
                            Description = "Car description2...",
                            EngineId = 4,
                            FuelId = 1,
                            ImageUrl = "https://lh3.googleusercontent.com/proxy/r31nMzFvIBFXtAETyk6TaTrPpwO0eNWSDyQa1UGXCb9XkHa2vbDGczQu8J1vXfjv5v663TVdd-mh-kVtOqvRkcNRmFMBbykg",
                            KilometersDriven = 0,
                            RegisterDate = new DateTime(2021, 6, 23, 11, 7, 25, 382, DateTimeKind.Local).AddTicks(9970),
                            RegisterNumber = "AE5544KE",
                            SeatsCount = 4,
                            TransmissionId = 3,
                            TrunkSize = 80
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 1,
                            CarClassId = 5,
                            CarStatusId = 1,
                            CarTypeId = 3,
                            Description = "Car description2...",
                            EngineId = 4,
                            FuelId = 1,
                            ImageUrl = "https://lh3.googleusercontent.com/proxy/r31nMzFvIBFXtAETyk6TaTrPpwO0eNWSDyQa1UGXCb9XkHa2vbDGczQu8J1vXfjv5v663TVdd-mh-kVtOqvRkcNRmFMBbykg",
                            KilometersDriven = 0,
                            RegisterDate = new DateTime(2021, 6, 23, 11, 7, 25, 382, DateTimeKind.Local).AddTicks(9977),
                            RegisterNumber = "AE5544KE",
                            SeatsCount = 4,
                            TransmissionId = 3,
                            TrunkSize = 60
                        });
                });

            modelBuilder.Entity("CarRentWebsite.Models.CarClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Microcar"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Subcompact car"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Compact car"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Mid-size car"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Entry-level car"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Full-size car"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Mid-size car"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Hatchback"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Grand tourer"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Compact minivan"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Minivan"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Mini SUV"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Mid-size SUV"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Full-size SUV"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Mini pickup truck"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Mid-size pickup truck"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Pickup truck"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Compact SUV"
                        });
                });

            modelBuilder.Entity("CarRentWebsite.Models.CarService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarServices");
                });

            modelBuilder.Entity("CarRentWebsite.Models.CarServiceReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarServiceId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionReportId")
                        .HasColumnType("int");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<string>("ServiceWorkerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CarServiceId");

                    b.HasIndex("ConditionReportId");

                    b.HasIndex("ServiceWorkerId");

                    b.ToTable("CarServiceReports");
                });

            modelBuilder.Entity("CarRentWebsite.Models.CarStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Idle"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Rent"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Repair"
                        });
                });

            modelBuilder.Entity("CarRentWebsite.Models.CarType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Econom"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Business"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Luxury"
                        });
                });

            modelBuilder.Entity("CarRentWebsite.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kharkiw"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kyiv"
                        });
                });

            modelBuilder.Entity("CarRentWebsite.Models.ConditionMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConditionMarks");
                });

            modelBuilder.Entity("CarRentWebsite.Models.ConditionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("CarMileage")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FuelVolume")
                        .HasColumnType("int");

                    b.Property<int>("InteriorConditionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCritical")
                        .HasColumnType("bit");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("InteriorConditionId");

                    b.HasIndex("ManagerId");

                    b.ToTable("ConditionReports");
                });

            modelBuilder.Entity("CarRentWebsite.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Germany"
                        });
                });

            modelBuilder.Entity("CarRentWebsite.Models.Engine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FuelCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<int>("Torque")
                        .HasColumnType("int");

                    b.Property<string>("WinCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Engines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FuelCapacity = 6,
                            Name = "Engine1",
                            Power = 120,
                            Torque = 45,
                            WinCode = "ASD45ufa95"
                        },
                        new
                        {
                            Id = 2,
                            FuelCapacity = 6,
                            Name = "Engine2",
                            Power = 120,
                            Torque = 45,
                            WinCode = "ASttrra95"
                        },
                        new
                        {
                            Id = 3,
                            FuelCapacity = 6,
                            Name = "Engine3",
                            Power = 120,
                            Torque = 45,
                            WinCode = "1123456"
                        },
                        new
                        {
                            Id = 4,
                            FuelCapacity = 6,
                            Name = "Engine4",
                            Power = 120,
                            Torque = 45,
                            WinCode = "9034hh5"
                        });
                });

            modelBuilder.Entity("CarRentWebsite.Models.Fuel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fuels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Petrol"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Diesel"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Electric"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hybrid"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Propane"
                        });
                });

            modelBuilder.Entity("CarRentWebsite.Models.PriceCoefficient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<double>("Coefficient")
                        .HasColumnType("float");

                    b.Property<int>("DaysCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("PriceCoefficients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 1,
                            Coefficient = 0.90000000000000002,
                            DaysCount = 4
                        },
                        new
                        {
                            Id = 2,
                            CarId = 1,
                            Coefficient = 0.59999999999999998,
                            DaysCount = 7
                        },
                        new
                        {
                            Id = 3,
                            CarId = 1,
                            Coefficient = 0.5,
                            DaysCount = 14
                        },
                        new
                        {
                            Id = 4,
                            CarId = 1,
                            Coefficient = 0.20000000000000001,
                            DaysCount = 21
                        },
                        new
                        {
                            Id = 5,
                            CarId = 2,
                            Coefficient = 0.80000000000000004,
                            DaysCount = 4
                        },
                        new
                        {
                            Id = 6,
                            CarId = 2,
                            Coefficient = 0.69999999999999996,
                            DaysCount = 7
                        },
                        new
                        {
                            Id = 7,
                            CarId = 2,
                            Coefficient = 0.59999999999999998,
                            DaysCount = 14
                        },
                        new
                        {
                            Id = 8,
                            CarId = 2,
                            Coefficient = 0.5,
                            DaysCount = 21
                        },
                        new
                        {
                            Id = 9,
                            CarId = 3,
                            Coefficient = 0.80000000000000004,
                            DaysCount = 4
                        },
                        new
                        {
                            Id = 10,
                            CarId = 3,
                            Coefficient = 0.69999999999999996,
                            DaysCount = 7
                        },
                        new
                        {
                            Id = 11,
                            CarId = 3,
                            Coefficient = 0.59999999999999998,
                            DaysCount = 14
                        },
                        new
                        {
                            Id = 12,
                            CarId = 3,
                            Coefficient = 0.5,
                            DaysCount = 21
                        },
                        new
                        {
                            Id = 13,
                            CarId = 4,
                            Coefficient = 0.90000000000000002,
                            DaysCount = 4
                        },
                        new
                        {
                            Id = 14,
                            CarId = 4,
                            Coefficient = 0.80000000000000004,
                            DaysCount = 7
                        },
                        new
                        {
                            Id = 15,
                            CarId = 4,
                            Coefficient = 0.69999999999999996,
                            DaysCount = 14
                        },
                        new
                        {
                            Id = 16,
                            CarId = 4,
                            Coefficient = 0.59999999999999998,
                            DaysCount = 21
                        });
                });

            modelBuilder.Entity("CarRentWebsite.Models.Rent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("RentStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RentStatusId");

                    b.ToTable("Rents");
                });

            modelBuilder.Entity("CarRentWebsite.Models.RentAddedOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RentAdditionalOptionId")
                        .HasColumnType("int");

                    b.Property<int>("RentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RentAdditionalOptionId");

                    b.HasIndex("RentId");

                    b.ToTable("RentAddedOptions");
                });

            modelBuilder.Entity("CarRentWebsite.Models.RentAdditionalOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("RentAdditionalOptions");
                });

            modelBuilder.Entity("CarRentWebsite.Models.RentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RentStatuses");
                });

            modelBuilder.Entity("CarRentWebsite.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("CarRentWebsite.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Customer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ServiceWorker"
                        });
                });

            modelBuilder.Entity("CarRentWebsite.Models.Transmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transmissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "AT"
                        },
                        new
                        {
                            Id = 2,
                            Name = "MT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "AM"
                        },
                        new
                        {
                            Id = 4,
                            Name = "CVT"
                        });
                });

            modelBuilder.Entity("RentRentAdditionalOption", b =>
                {
                    b.Property<int>("AdditionalOptionsId")
                        .HasColumnType("int");

                    b.Property<int>("RentsId")
                        .HasColumnType("int");

                    b.HasKey("AdditionalOptionsId", "RentsId");

                    b.HasIndex("RentsId");

                    b.ToTable("RentRentAdditionalOption");
                });

            modelBuilder.Entity("CarRentWebsite.Models.Users.Customer", b =>
                {
                    b.HasBaseType("CarRentWebsite.Models.ApplicationUser");

                    b.Property<string>("CustomerInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("CarRentWebsite.Models.Users.Manager", b =>
                {
                    b.HasBaseType("CarRentWebsite.Models.ApplicationUser");

                    b.Property<string>("ManagerInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Manager");
                });

            modelBuilder.Entity("CarRentWebsite.Models.Users.ServiceWorker", b =>
                {
                    b.HasBaseType("CarRentWebsite.Models.ApplicationUser");

                    b.Property<string>("ServiceWorkerInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ServiceWorker");
                });

            modelBuilder.Entity("CarRentWebsite.Models.ApplicationUser", b =>
                {
                    b.HasOne("CarRentWebsite.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CarRentWebsite.Models.Car", b =>
                {
                    b.HasOne("CarRentWebsite.Models.Brand", "Brand")
                        .WithMany("Cars")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentWebsite.Models.CarClass", "CarClass")
                        .WithMany("Cars")
                        .HasForeignKey("CarClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentWebsite.Models.CarStatus", "CarStatus")
                        .WithMany("Cars")
                        .HasForeignKey("CarStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentWebsite.Models.CarType", "CarType")
                        .WithMany("Cars")
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentWebsite.Models.Engine", "Engine")
                        .WithMany("Cars")
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentWebsite.Models.Fuel", "Fuel")
                        .WithMany("Cars")
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentWebsite.Models.Transmission", "Transmission")
                        .WithMany("Cars")
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("CarClass");

                    b.Navigation("CarStatus");

                    b.Navigation("CarType");

                    b.Navigation("Engine");

                    b.Navigation("Fuel");

                    b.Navigation("Transmission");
                });

            modelBuilder.Entity("CarRentWebsite.Models.CarServiceReport", b =>
                {
                    b.HasOne("CarRentWebsite.Models.CarService", "CarService")
                        .WithMany("CarServiceReports")
                        .HasForeignKey("CarServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentWebsite.Models.ConditionReport", "ConditionReport")
                        .WithMany("CarServiceReports")
                        .HasForeignKey("ConditionReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentWebsite.Models.Users.ServiceWorker", "ServiceWorker")
                        .WithMany("CarServiceReports")
                        .HasForeignKey("ServiceWorkerId");

                    b.Navigation("CarService");

                    b.Navigation("ConditionReport");

                    b.Navigation("ServiceWorker");
                });

            modelBuilder.Entity("CarRentWebsite.Models.ConditionReport", b =>
                {
                    b.HasOne("CarRentWebsite.Models.Car", "Car")
                        .WithMany("ConditionReports")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentWebsite.Models.ConditionMark", "InteriorCondition")
                        .WithMany("LpcConditionReports")
                        .HasForeignKey("InteriorConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentWebsite.Models.Users.Manager", "Manager")
                        .WithMany("ConditionReports")
                        .HasForeignKey("ManagerId");

                    b.Navigation("Car");

                    b.Navigation("InteriorCondition");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("CarRentWebsite.Models.PriceCoefficient", b =>
                {
                    b.HasOne("CarRentWebsite.Models.Car", "Car")
                        .WithMany("PriceCoefficients")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarRentWebsite.Models.Rent", b =>
                {
                    b.HasOne("CarRentWebsite.Models.Car", "Car")
                        .WithMany("Rents")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentWebsite.Models.Users.Customer", "Customer")
                        .WithMany("Rents")
                        .HasForeignKey("CustomerId");

                    b.HasOne("CarRentWebsite.Models.Users.Manager", "Manager")
                        .WithMany("Rents")
                        .HasForeignKey("ManagerId");

                    b.HasOne("CarRentWebsite.Models.RentStatus", "RentStatus")
                        .WithMany("Rents")
                        .HasForeignKey("RentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");

                    b.Navigation("Manager");

                    b.Navigation("RentStatus");
                });

            modelBuilder.Entity("CarRentWebsite.Models.RentAddedOption", b =>
                {
                    b.HasOne("CarRentWebsite.Models.RentAdditionalOption", "RentAdditionalOption")
                        .WithMany()
                        .HasForeignKey("RentAdditionalOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentWebsite.Models.Rent", "Rent")
                        .WithMany()
                        .HasForeignKey("RentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rent");

                    b.Navigation("RentAdditionalOption");
                });

            modelBuilder.Entity("CarRentWebsite.Models.Review", b =>
                {
                    b.HasOne("CarRentWebsite.Models.Car", "Car")
                        .WithMany("Reviews")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentWebsite.Models.Users.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RentRentAdditionalOption", b =>
                {
                    b.HasOne("CarRentWebsite.Models.RentAdditionalOption", null)
                        .WithMany()
                        .HasForeignKey("AdditionalOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentWebsite.Models.Rent", null)
                        .WithMany()
                        .HasForeignKey("RentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarRentWebsite.Models.Brand", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRentWebsite.Models.Car", b =>
                {
                    b.Navigation("ConditionReports");

                    b.Navigation("PriceCoefficients");

                    b.Navigation("Rents");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("CarRentWebsite.Models.CarClass", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRentWebsite.Models.CarService", b =>
                {
                    b.Navigation("CarServiceReports");
                });

            modelBuilder.Entity("CarRentWebsite.Models.CarStatus", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRentWebsite.Models.CarType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRentWebsite.Models.ConditionMark", b =>
                {
                    b.Navigation("LpcConditionReports");
                });

            modelBuilder.Entity("CarRentWebsite.Models.ConditionReport", b =>
                {
                    b.Navigation("CarServiceReports");
                });

            modelBuilder.Entity("CarRentWebsite.Models.Engine", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRentWebsite.Models.Fuel", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRentWebsite.Models.RentStatus", b =>
                {
                    b.Navigation("Rents");
                });

            modelBuilder.Entity("CarRentWebsite.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CarRentWebsite.Models.Transmission", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRentWebsite.Models.Users.Customer", b =>
                {
                    b.Navigation("Rents");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("CarRentWebsite.Models.Users.Manager", b =>
                {
                    b.Navigation("ConditionReports");

                    b.Navigation("Rents");
                });

            modelBuilder.Entity("CarRentWebsite.Models.Users.ServiceWorker", b =>
                {
                    b.Navigation("CarServiceReports");
                });
#pragma warning restore 612, 618
        }
    }
}
